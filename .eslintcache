[{"D:\\dev\\cab\\cab2021_typescript\\src\\index.tsx":"1","D:\\dev\\cab\\cab2021_typescript\\src\\reportWebVitals.ts":"2","D:\\dev\\cab\\cab2021_typescript\\src\\store\\reducers.ts":"3","D:\\dev\\cab\\cab2021_typescript\\src\\components\\App\\App.tsx":"4","D:\\dev\\cab\\cab2021_typescript\\src\\store\\state.ts":"5","D:\\dev\\cab\\cab2021_typescript\\src\\components\\LoginPage\\index.tsx":"6","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\index.tsx":"7","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminStatistics.tsx":"8","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\NavBar.tsx":"9","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\UserPages\\UserTasks\\UserTasks.tsx":"10","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\UserPages\\UserResults\\UserResults.tsx":"11","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminAddTask.tsx":"12","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminResults.tsx":"13","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminShowTestInfo.tsx":"14","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\index.tsx":"15","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\UserPages\\UserTasks\\UserTasksTable.tsx":"16","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\UserPages\\UserResults\\UserResultsTab.tsx":"17","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_B_1.tsx":"18","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_B_0.tsx":"19","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_A_2.tsx":"20","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_A_1.tsx":"21","D:\\dev\\cab\\cab2021_typescript\\src\\store\\Tests.ts":"22","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_A_0.tsx":"23","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminShowTestInfoTest.tsx":"24"},{"size":744,"mtime":1613039998666,"results":"25","hashOfConfig":"26"},{"size":440,"mtime":1613039998666,"results":"27","hashOfConfig":"26"},{"size":1459,"mtime":1613571711916,"results":"28","hashOfConfig":"26"},{"size":717,"mtime":1613039998663,"results":"29","hashOfConfig":"26"},{"size":314,"mtime":1613564537375,"results":"30","hashOfConfig":"26"},{"size":2403,"mtime":1613039998664,"results":"31","hashOfConfig":"26"},{"size":1906,"mtime":1613371140450,"results":"32","hashOfConfig":"26"},{"size":189,"mtime":1613039998664,"results":"33","hashOfConfig":"26"},{"size":3131,"mtime":1613131096205,"results":"34","hashOfConfig":"26"},{"size":233,"mtime":1613045115525,"results":"35","hashOfConfig":"26"},{"size":250,"mtime":1613569047791,"results":"36","hashOfConfig":"26"},{"size":5257,"mtime":1613570852543,"results":"37","hashOfConfig":"26"},{"size":7506,"mtime":1613566079435,"results":"38","hashOfConfig":"26"},{"size":8387,"mtime":1613566451869,"results":"39","hashOfConfig":"26"},{"size":6502,"mtime":1613572494820,"results":"40","hashOfConfig":"26"},{"size":4585,"mtime":1613568983335,"results":"41","hashOfConfig":"26"},{"size":4694,"mtime":1613569023870,"results":"42","hashOfConfig":"26"},{"size":2442,"mtime":1613569074173,"results":"43","hashOfConfig":"26"},{"size":1489,"mtime":1613569091399,"results":"44","hashOfConfig":"26"},{"size":3823,"mtime":1613453597331,"results":"45","hashOfConfig":"26"},{"size":3612,"mtime":1613453597331,"results":"46","hashOfConfig":"26"},{"size":137950,"mtime":1613568882391,"results":"47","hashOfConfig":"26"},{"size":3440,"mtime":1613125384521,"results":"48","hashOfConfig":"26"},{"size":1685,"mtime":1613562876006,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"rgprtn",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"52"},"D:\\dev\\cab\\cab2021_typescript\\src\\index.tsx",[],["111","112"],"D:\\dev\\cab\\cab2021_typescript\\src\\reportWebVitals.ts",[],"D:\\dev\\cab\\cab2021_typescript\\src\\store\\reducers.ts",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\App\\App.tsx",[],"D:\\dev\\cab\\cab2021_typescript\\src\\store\\state.ts",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\LoginPage\\index.tsx",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\index.tsx",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminStatistics.tsx",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\NavBar.tsx",["113"],"import { AppBar, Button, MenuItem, Toolbar } from '@material-ui/core';\r\nimport React, { Dispatch, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport const NavBar:React.FC = () => {\r\n    const curStateUserData = useSelector((state:IRootState) => state.curUser);\r\n    const [curUserData, setCurUserData] = useState<IUserData>({\r\n        UserId : -1,\r\n        UserFIO : \"\"\r\n    });\r\n    \r\n    const [ curNavMenu, setCurNavMenu ] = useState([]);\r\n    \r\n    useEffect(()=>{\r\n       setCurUserData(curStateUserData);     \r\n    },[curStateUserData]);\r\n\r\n    const dispatch:Dispatch<any> = useDispatch();\r\n    const NavMenuClickHanlder = ( link:string ) => {\r\n        dispatch({\r\n            type: \"ShowSubPage\",\r\n            newSubPage: link\r\n        })\r\n   };\r\n   const NavMenuExitHandler = () => {\r\n       dispatch({\r\n           type : \"LogOut\"\r\n       })\r\n   };\r\n    useEffect (() => {\r\n       \r\n        let menu:any;\r\n        if (curUserData.UserFIO === \"Admin\" ) {\r\n            menu = (\r\n                <>                \r\n                    <MenuItem\r\n                        onClick = { () => {\r\n                            NavMenuClickHanlder(\"AdminAddTask\")\r\n                        }}>Дадаць заданне</MenuItem>\r\n                    <MenuItem\r\n                        onClick = { () => {\r\n                            NavMenuClickHanlder(\"AdminResults\")\r\n                        }}>Вынікі тэстаў</MenuItem>\r\n                    <MenuItem\r\n                        onClick = { () => {\r\n                            NavMenuClickHanlder(\"AdminStatistics\")\r\n                        }}>Статыстыка</MenuItem>\r\n                    <MenuItem\r\n                        onClick = { () => {\r\n                            NavMenuExitHandler();\r\n                        }}>Выхад</MenuItem>\r\n                    </>\r\n            );\r\n        }        \r\n        else {\r\n            menu = (\r\n                <>                \r\n                    <MenuItem\r\n                        onClick = { () => {\r\n                            NavMenuClickHanlder(\"UserTasks\")\r\n                        }}>Заданні</MenuItem>\r\n                    <MenuItem\r\n                        onClick = { () => {\r\n                            NavMenuClickHanlder(\"UserResults\")\r\n                        }}>Вынікі тэстаў</MenuItem>                \r\n                    <MenuItem\r\n                        onClick = { () => {\r\n                            NavMenuExitHandler();\r\n                        }}>Выхад</MenuItem>\r\n                    </>\r\n            );\r\n        }\r\n        setCurNavMenu(menu);                \r\n    }, [curUserData]);\r\n   \r\n   return (\r\n        <div className = \"NavBar\">\r\n            <AppBar position=\"static\" className=\"NavBar\">\r\n                <Toolbar className=\"NavBar_1\">\r\n                    <Button color=\"inherit\"> {`Прывітанне,  ${curUserData.UserFIO}`}</Button>       \r\n                    <div className=\"NavBar_Nav\">{curNavMenu}</div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\UserPages\\UserTasks\\UserTasks.tsx",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\UserPages\\UserResults\\UserResults.tsx",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminAddTask.tsx",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminResults.tsx",["114","115","116","117","118","119"],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst useStyles = makeStyles({\r\n  tablecell: {\r\n    fontSize: \"25px\",\r\n  },\r\n  select: {\r\n    width: \"250px\",\r\n    padding: \"50px\",\r\n    paddingTop: 0\r\n  },\r\n  big : {\r\n      flexDirection: \"column\"\r\n  },\r\n  head : {}\r\n});\r\n\r\nexport const AdminResults: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const classes = useStyles();\r\n  const [curFullTestList, setCurFullTestList] = useState<any[]>([]);\r\n  const [curShowTasks, setCurShowTasks] = useState<any[]>([]);\r\n\r\n  const [usersFIO, setUsersFIO] = useState<string[]>([\"f1\", \"f2\", \"f3\", \"f4\"]);\r\n  const [testsName, setTestsname] = useState<string[]>([\"1\", \"2\", \"3\"]);\r\n\r\n  const [selectedFIO, setSeletedFIO] = useState(\"\");\r\n  const [selectedTest, setSelectedTest] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(`https://cab07.000webhostapp.com/new_refact/new_admin_GetResults.php`)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        let arr: any[] = [];\r\n\r\n        result.results.map((el: any) => {\r\n          arr.push({\r\n            user_fio: el.user_fio,\r\n            task_id: el.task_id,\r\n            test_id: el.test_id,\r\n            test_name: el.test_name,\r\n            dateTime: el.dateTime,\r\n            result: el.result,\r\n          });\r\n        });\r\n        setCurFullTestList(arr);\r\n        setCurShowTasks(arr);\r\n      });\r\n  }, []);\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://cab07.000webhostapp.com/new_refact/new_admin_getUsersAndTests.php`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setUsersFIO(result.users);\r\n        setTestsname(result.tests);\r\n      });\r\n  }, []);\r\n  const trClickHandler = (id: number) => {\r\n    dispatch({\r\n      type: \"ShowTestInfo\",\r\n      showTestId: id,\r\n    });\r\n  };\r\n  return (\r\n      < div className = {classes.big}>\r\n      <div className = {classes.head}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"demo-simple-select-label\">\r\n            Пошук па фаміліі вучня\r\n          </InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={selectedFIO}\r\n            onChange={(e) => {\r\n              let x: string = e.target.value as string;\r\n              setSeletedFIO(x);\r\n              let showArr: any[] = curFullTestList;\r\n              let newArr: any[] = [];\r\n              showArr.map((el: any) => {\r\n                if (el.user_fio === x) {\r\n                  newArr.push(el);\r\n                }\r\n              });\r\n              setCurShowTasks(newArr);\r\n            }}\r\n          >\r\n            {usersFIO.map((el) => {\r\n              return <MenuItem value={el}>{el}</MenuItem>;\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"demo-simple-select-label\">\r\n            Пошук па назве тэста\r\n          </InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            onChange={(e) => {\r\n              let x: string = e.target.value as string;\r\n              setSelectedTest(x);\r\n              let showArr: any[] = curFullTestList;\r\n              let newArr: any[] = [];\r\n              showArr.map((el: any) => {\r\n                if (el.test_name === x) {\r\n                  newArr.push(el);\r\n                }\r\n              });\r\n              setCurShowTasks(newArr);\r\n            }}\r\n          >\r\n            {testsName.map((el) => {\r\n              return <MenuItem value={el}>{el}</MenuItem>;\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n      <div className=\"UserResultsTab\">      \r\n      <Paper>\r\n        <TableContainer>\r\n          <Table\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n            className=\"UserResultsTab\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell\r\n                  key={\"00\"}\r\n                  align=\"center\"\r\n                  style={{ minWidth: \"250px\" }}\r\n                  className={classes.tablecell}\r\n                >\r\n                  Фамілія вучня\r\n                </TableCell>\r\n                <TableCell\r\n                  key={\"01\"}\r\n                  align=\"center\"\r\n                  style={{ minWidth: \"250px\" }}\r\n                  className={classes.tablecell}\r\n                >\r\n                  Назва тэста\r\n                </TableCell>\r\n                <TableCell\r\n                  key={\"02\"}\r\n                  align=\"center\"\r\n                  style={{ minWidth: \"200px\" }}\r\n                  className={classes.tablecell}\r\n                >\r\n                  Дата выканання\r\n                </TableCell>\r\n                <TableCell\r\n                  key={\"03\"}\r\n                  align=\"center\"\r\n                  style={{ minWidth: \"100px\" }}\r\n                  className={classes.tablecell}\r\n                >\r\n                  Вынік\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {/* select results by task id to arr\r\n                            show \r\n                            <tableRow>\r\n                                <test name><medium value>\r\n                            <table row>\r\n                                <attempt date><attempt result>\r\n                                <attempt date><attempt result>\r\n                                <attempt date><attempt result>\r\n                                \r\n                            */}\r\n              {curShowTasks.map((el) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    key={el.test_id}\r\n                    onClick={() => trClickHandler(el.test_id)}\r\n                  >\r\n                    <TableCell\r\n                      align=\"center\"\r\n                      key={el.test_id + \"00\"}\r\n                      className={classes.tablecell}\r\n                    >\r\n                      {el.user_fio}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"center\"\r\n                      key={el.test_id + \"01\"}\r\n                      className={classes.tablecell}\r\n                    >\r\n                      {el.test_name}_{el.task_id}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"center\"\r\n                      key={el.test_id + \"02\"}\r\n                      className={classes.tablecell}\r\n                    >\r\n                      {el.dateTime}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"center\"\r\n                      key={el.test_id + \"02\"}\r\n                      className={classes.tablecell}\r\n                    >\r\n                      {el.result}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminShowTestInfo.tsx",["120","121","122","123"],"import { makeStyles, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TestBase } from '../../../store/Tests';\r\nimport { AdminShowTestInfoTest } from './AdminShowTestInfoTest';\r\n\r\ninterface Tab{\r\n    id: string;\r\n    rightAns: string;\r\n    userAns: string;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    Main: {\r\n        width: \"1100px\",\r\n        height: \"700px\",        \r\n    },\r\n    tabA : {\r\n        width: \"100%\"\r\n    },\r\n    TCA : {     \r\n        width: 10,\r\n        fontSize:\"18px\",\r\n        textAlign : \"center\"\r\n    },\r\n    tabB : {\r\n        width: \"100%\"\r\n    },\r\n    TCB : {\r\n        maxWidth: \"100px\",       \r\n        fontSize:\"14px\",\r\n        textAlign : \"center\"\r\n    },\r\n    right : {\r\n        color: \"green\"\r\n    },\r\n    bad : {\r\n        color: \"red\"\r\n    },\r\n    title : {\r\n        fontSize: \"25px\",\r\n        textAlign: \"center\",\r\n        width: \"100%\"\r\n    }\r\n})\r\n\r\nfunction compare( a:Tab, b:Tab ) {   \r\n    let q:any = (a.id).substr(1);    \r\n    let w:any = (b.id).substr(1);\r\n    if ( ( q /1 ) < ( w / 1 ) ){\r\n      return -1;\r\n    }\r\n    if ( (q / 1 ) > ( w / 1) ){\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\nexport const AdminShowTestInfo:React.FC = () => {\r\n    const classes = useStyles();\r\n    const curShowTestInfoId = useSelector((state:IRootState) => state.curShowTestInfoId);\r\n    const [ curTestData, setCurTestData ] = useState<any>({});\r\n\r\n    const [ showTest, setShowTest ] = useState([]);\r\n    \r\n    const [ curATab, setATab ] = useState<Tab[]>([]);\r\n    const [ curBTab, setBTab ] = useState<Tab[]>([]);\r\n\r\n    const [ curUserRightCount, setRightCount ] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        let curTest: any[] = [];\r\n        let aTab:Tab[] = [];\r\n        let bTab:Tab[] = [];     \r\n\r\n        let rightCount : number = 0;\r\n\r\n        fetch(`https://cab07.000webhostapp.com/new_refact/new_admin_GetTestInfo.php?request_test_id=${curShowTestInfoId}`)\r\n        .then((res) => res.json())\r\n        .then(\r\n          (result) => {                \r\n                setCurTestData( result.results[0] ); \r\n                TestBase.map ( (el:any) =>{\r\n                    if (el.testSetName === result.results[0].test_name) {\r\n                        curTest = el.questions;\r\n                        setShowTest( el.questions );\r\n                    }\r\n                });\r\n                   \r\n                result.results[0].answers.split('@').map ( (el:string) => {\r\n                    if (el.split('_')[0][0] === \"A\") {\r\n                        let qq: any;                        \r\n                        curTest.map( (al:any) => {\r\n                            if (al.id === el.split('_')[0]) {\r\n                                qq = al.right;\r\n                            }\r\n                        });                        \r\n                        aTab.push({\r\n                            id: el.split('_')[0],\r\n                            userAns: el.split('_')[3],\r\n                            rightAns: qq\r\n                        });\r\n                        if ( el.split('_')[3] === qq ) { rightCount += 1;}\r\n                    }\r\n                    else {\r\n                        let qq: any;\r\n                        curTest.map( (al:any) => {\r\n                            if (al.id === el.split('_')[0]) {\r\n                                qq = al.right;\r\n                            }\r\n                        });\r\n                        bTab.push({\r\n                            id: el.split('_')[0],\r\n                            userAns: el.split('_')[3],\r\n                            rightAns: qq\r\n                        });\r\n                        if ( el.split('_')[3] === qq ) { rightCount += 1;}\r\n                    }                    \r\n                })      \r\n                aTab.sort( compare );\r\n                setATab( aTab ); \r\n                bTab.sort( compare );\r\n                setBTab ( bTab );                 \r\n                setRightCount( rightCount );\r\n           });\r\n                \r\n    },[curShowTestInfoId]);\r\n    return (\r\n        <div className = {classes.Main}>\r\n            <p className = {classes.title}>Тэст: {curTestData.test_name}</p>\r\n            <p className = {classes.title}>Выканаў:  {curTestData.user_fio}</p>\r\n            <p className = {classes.title}>Вынік: {curTestData.result} %  ( {curUserRightCount}/{showTest.length} )</p>\r\n            <p className = {classes.title}>Дата выканання: {curTestData.dateTime}</p>\r\n\r\n            <Paper>\r\n                <TableContainer className = {classes.tabA}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            { curATab.map( (el:Tab) => {\r\n                                return (\r\n                                    <TableCell className={classes.TCA}>{el.id}</TableCell>\r\n                                )                                    \r\n                            })}\r\n                        </TableRow>                        \r\n                    </TableHead>   \r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell>Адказ</TableCell>  \r\n                            { curATab.map( (el:Tab) => {\r\n                                return (\r\n                                    <TableCell className={classes.TCA}>{el.rightAns}</TableCell>\r\n                                )\r\n                            })}                            \r\n                        </TableRow>                        \r\n                        <TableRow>\r\n                            <TableCell>Вучань</TableCell>    \r\n                            { curATab.map( (el:Tab, ind:number) => {\r\n                                return (\r\n                                    <TableCell \r\n                                        className={`${classes.TCA} ${el.rightAns === el.userAns?classes.right:classes.bad}`}>\r\n                                            {el.userAns.length>0?el.userAns:\"-\"}\r\n                                            </TableCell>\r\n                                )\r\n                            })}                          \r\n                        </TableRow>\r\n                    </TableBody>               \r\n                </TableContainer>\r\n\r\n                <TableContainer className = {classes.tabB}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            { curBTab.map( (el:Tab) => {\r\n                                return (\r\n                                    <TableCell className={classes.TCB}>{el.id}</TableCell>\r\n                                )                                    \r\n                            })}\r\n                        </TableRow>                        \r\n                    </TableHead>   \r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell>Адказ</TableCell>  \r\n                            { curBTab.map( (el:Tab) => {\r\n                                return (\r\n                                    <TableCell className={classes.TCB}>{el.rightAns}</TableCell>\r\n                                )\r\n                            })}                            \r\n                        </TableRow>                        \r\n                        <TableRow>\r\n                            <TableCell>Вучань</TableCell>    \r\n                            { curBTab.map( (el:Tab, ind:number) => {\r\n                                return (\r\n                                    <TableCell \r\n                                        className={`${classes.TCB} ${el.rightAns === el.userAns?classes.right:classes.bad}`}>\r\n                                        {el.userAns.length>0?el.userAns:\"-\"}    \r\n                                    </TableCell>\r\n                                )\r\n                            })}                          \r\n                        </TableRow>\r\n                    </TableBody>               \r\n                </TableContainer>\r\n                <AdminShowTestInfoTest arr = { showTest }/>             \r\n            </Paper>\r\n\r\n        \r\n        </div>\r\n    )\r\n}","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\index.tsx",["124","125","126","127","128","129","130","131","132"],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\UserPages\\UserTasks\\UserTasksTable.tsx",["133","134","135"],"import { makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead,  TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst useStyles = makeStyles({\r\n    tablecell : {\r\n        fontSize: \"25px\",\r\n    },\r\n  });\r\n\r\nexport const UserResultsTab: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch:Dispatch<any> = useDispatch();\r\n    const curUserFIO = useSelector((state:IRootState) => state.curUser.UserFIO);\r\n    const [ curShowTasks, setCurShowTasks ] = useState<any[]>([]);\r\n\r\n    const getTabData = ( ) => {\r\n        fetch(`https://cab07.000webhostapp.com/new_refact/new_user_getTasks.php?request_user_fio=${curUserFIO}`)\r\n        .then( (res)=>res.json())\r\n        .then (\r\n            (result) => {           \r\n                let arr:any[] = [];     \r\n                result.tasks.map ( (el:any) => {\r\n                    arr.push(                     \r\n                        {\r\n                            test_id : el.task_id,\r\n                            test_name: el.task_test_name,\r\n                            dateTime: el.task_end_time,\r\n                            attepts_count: el.task_attempts_count\r\n                        }\r\n                    )\r\n                })  \r\n                setCurShowTasks(arr);                  \r\n            }\r\n        );      \r\n    }\r\n    useEffect (()=>{\r\n        getTabData();\r\n    },[])\r\n    useEffect(()=>{        \r\n        getTabData();   \r\n    },[curUserFIO]);\r\n    const userTaksTrClickHandler = (nam: string, id:number ) => {\r\n        dispatch ({\r\n            type : \"ShowTest\",\r\n            testName : nam,\r\n            testId: id\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"UserTasksTab\">           \r\n            <Paper>\r\n                <TableContainer>\r\n                    <Table stickyHeader aria-label=\"sticky table\" className=\"UserTasksTab\" >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {/* <TableCell\r\n                                    key={\"01\"}\r\n                                    align=\"center\"\r\n                                    style={{ minWidth: \"250px\" }}\r\n                                    className={classes.tablecell}\r\n                                >\r\n                                    Назва тэста\r\n                                </TableCell> */}\r\n                                <TableCell\r\n                                    key={\"02\"}\r\n                                    align=\"center\"\r\n                                    style={{ minWidth: \"200px\" }}\r\n                                    className={classes.tablecell}\r\n                                >\r\n                                    Канчатковая дата выканання\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    key={\"03\"}\r\n                                    align=\"center\"\r\n                                    style={{ minWidth: \"100px\" }}\r\n                                    className={classes.tablecell}\r\n                                >\r\n                                    Колькасць спроб\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>     \r\n                            { curShowTasks.map ( el => {\r\n                                return (\r\n                                    <TableRow \r\n                                        hover\r\n                                        key = {el.test_id} \r\n                                        onClick = { () => { userTaksTrClickHandler(el.test_name, el.test_id)}}>\r\n                                        {/* <TableCell align=\"center\" key={el.test_id+\"01\"} className={classes.tablecell}>{el.test_name}</TableCell> */}\r\n                                        <TableCell align=\"center\" key={el.test_id+\"02\"} className={classes.tablecell}>{el.dateTime}</TableCell>\r\n                                        <TableCell align=\"center\" key={el.test_id+\"02\"} className={classes.tablecell}>{el.attepts_count}</TableCell>\r\n                                    </TableRow>  \r\n                                )\r\n                            } )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\UserPages\\UserResults\\UserResultsTab.tsx",["136"],"import { makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles({\r\n    tablecell : {\r\n        fontSize: \"25px\",\r\n    },\r\n  });\r\n\r\nexport const UserResultsTab: React.FC = () => {\r\n    const classes = useStyles();\r\n    const curUserFIO = useSelector((state:IRootState) => state.curUser.UserFIO);\r\n    const [ curShowTasks, setCurShowTasks ] = useState<any[]>([]);\r\n\r\n    useEffect(()=>{        \r\n        fetch(`https://cab07.000webhostapp.com/new_refact/new_user_getTestsResults.php?request_user_fio=${curUserFIO}`)\r\n        .then( (res)=>res.json())\r\n        .then (\r\n            (result) => {           \r\n                let arr:any[] = [];   \r\n\r\n                result.results.map ( (el:any) => {\r\n                    arr.push(                     \r\n                        {   \r\n                            task_id: el.task_id,\r\n                            test_id : el.test_id,\r\n                            test_name: el.test_name,\r\n                            dateTime: el.dateTime,\r\n                            result: el.result\r\n                        }\r\n                    )\r\n                })  \r\n                setCurShowTasks(arr.reverse());                  \r\n            }\r\n        );               \r\n    },[curUserFIO]);\r\n    return (\r\n        <div className=\"UserResultsTab\">           \r\n            <Paper>\r\n                <TableContainer>\r\n                    <Table stickyHeader aria-label=\"sticky table\" className=\"UserResultsTab\" >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {/* <TableCell\r\n                                    key={\"01\"}\r\n                                    align=\"center\"\r\n                                    style={{ minWidth: \"250px\" }}\r\n                                    className={classes.tablecell}\r\n                                >\r\n                                   Назва тэста\r\n                                </TableCell> */}\r\n                                <TableCell\r\n                                    key={\"02\"}\r\n                                    align=\"center\"\r\n                                    style={{ minWidth: \"200px\" }}\r\n                                    className={classes.tablecell}\r\n                                >\r\n                                    Дата выканання\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    key={\"03\"}\r\n                                    align=\"center\"\r\n                                    style={{ minWidth: \"100px\" }}\r\n                                    className={classes.tablecell}\r\n                                >\r\n                                    Вынік\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>     \r\n                            {/* select results by task id to arr\r\n                            show \r\n                            <tableRow>\r\n                                <test name><medium value>\r\n                            <table row>\r\n                                <attempt date><attempt result>\r\n                                <attempt date><attempt result>\r\n                                <attempt date><attempt result>\r\n                                \r\n                            */}\r\n                            { curShowTasks.map ( el => {\r\n                                return (\r\n                                    <>                                    \r\n                                    <TableRow \r\n                                        hover\r\n                                        key = {el.test_id} >\r\n                                        {/* <TableCell align=\"center\" key={el.test_id+\"01\"} className={classes.tablecell}>{el.test_name}_{el.task_id}</TableCell> */}\r\n                                        <TableCell align=\"center\" key={el.test_id+\"02\"} className={classes.tablecell}>{el.dateTime}</TableCell>\r\n                                        <TableCell align=\"center\" key={el.test_id+\"02\"} className={classes.tablecell}>{el.result}</TableCell>\r\n                                    </TableRow>\r\n                                    </>  \r\n                                )\r\n                            } )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_B_1.tsx",["137"],"import {\r\n  makeStyles,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport React, { Dispatch, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\ninterface ITT_B_1_props {\r\n  quest: string;\r\n  questTextArr: string[];\r\n}\r\n\r\nconst useStyles = makeStyles({ \r\n  container :{\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n  lil : {\r\n    fontSize: 30,\r\n    listStyleType: \"none\"\r\n  },\r\n  inner_container:{\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\"\r\n  },\r\n  quest: {\r\n    fontSize: 30,\r\n    textAlign: \"center\"\r\n  }\r\n});\r\n\r\nexport const TestTemplate_B_1 = ({quest, questTextArr}:ITT_B_1_props) => {\r\n  const classes = useStyles();\r\n  const dispatch:Dispatch<any> = useDispatch();\r\n  const curUserAnswer = useSelector((state:IRootState) => state.curUserAnswer);\r\n  \r\n  const [ curAnswer, setCurAnswer ] = useState(\"\");\r\n\r\n  useEffect(()=>{\r\n    if ( curUserAnswer === \"\") {\r\n      setCurAnswer(\"\")\r\n    }\r\n  },[curUserAnswer]);\r\n  useEffect(()=>{\r\n    dispatch({\r\n        type: \"SetUserAnswer\",\r\n        curUserAnswer : curAnswer\r\n    });\r\n  },[curAnswer]);\r\n  \r\n  return (\r\n    <div className={classes.container}>\r\n      <p className = {classes.quest}>{quest}</p>\r\n      <div className={classes.inner_container}>\r\n        <div>\r\n          <ul style={{}}>   \r\n            <li className = {classes.lil}>{questTextArr[0]}</li>\r\n            <li className = {classes.lil}>{questTextArr[1]}</li>\r\n            <li className = {classes.lil}>{questTextArr[2]}</li>\r\n            <li className = {classes.lil}>{questTextArr[3]}</li>\r\n            <li className = {classes.lil}>{questTextArr[4]}</li>\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <ul>\r\n            <li className = {classes.lil}>{questTextArr[5]}</li>\r\n            <li className = {classes.lil}>{questTextArr[6]}</li>\r\n            <li className = {classes.lil}>{questTextArr[7]}</li>\r\n            <li className = {classes.lil}>{questTextArr[8]}</li>\r\n            <li className = {classes.lil}>{questTextArr[9]}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <TextField \r\n        id=\"outlined-basic\" \r\n        label=\"Адказ\" \r\n        variant=\"outlined\"\r\n        value={curAnswer}\r\n        onChange = { e => { setCurAnswer(e.currentTarget.value)}} />\r\n    </div>\r\n  );\r\n};\r\n","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_B_0.tsx",["138"],"import {\r\n  makeStyles,\r\n  TextField,  \r\n} from \"@material-ui/core\";\r\nimport React, { Dispatch, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\ninterface ITT_B_0_props {\r\n  quest: string;\r\n  questText: string;\r\n}\r\n\r\nconst useStyles = makeStyles({ \r\n  container :{\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    alignContent: \"center\",\r\n    height: \"500px\"\r\n  },\r\n  questText :{\r\n    fontSize: 30\r\n  },\r\n  quest: {\r\n    fontSize: 30\r\n  }\r\n});\r\n\r\nexport const TestTemplate_B_0 = ({quest, questText}:ITT_B_0_props) => {\r\n  const classes = useStyles();\r\n  const dispatch:Dispatch<any> = useDispatch();\r\n  const curUserAnswer = useSelector((state:IRootState) => state.curUserAnswer);\r\n  \r\n  const [ curAnswer, setCurAnswer ] = useState(\"\");\r\n\r\n  useEffect(()=>{\r\n    if ( curUserAnswer === \"\") {\r\n      setCurAnswer(\"\")\r\n    }\r\n  },[curUserAnswer]);\r\n\r\n  useEffect(()=>{\r\n    dispatch({\r\n        type: \"SetUserAnswer\",\r\n        curUserAnswer : curAnswer\r\n    });\r\n  },[curAnswer]);\r\n  \r\n  return (\r\n    <div className={classes.container}>\r\n      <p className = {classes.quest}>{quest}</p>\r\n      <p className = {classes.questText}>{questText}</p>\r\n      <TextField\r\n        id=\"outlined-basic\" \r\n        label=\"Адказ\" \r\n        variant=\"outlined\" \r\n        value={curAnswer}\r\n        onChange = { e => { setCurAnswer(e.currentTarget.value)}}/>\r\n    </div>\r\n  );\r\n};\r\n","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_A_2.tsx",["139"],"import {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { Dispatch, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\ninterface ITT_A_2_props {\r\n  quest: string;\r\n  questText: string;\r\n  answers: string[];\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  group: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-around\",\r\n    height: \"250px\"\r\n  },\r\n  quest : {\r\n      fontSize: 35,\r\n      width: \"100%\",    \r\n      textAlign: \"center\"  \r\n  },\r\n  questText : {\r\n    fontSize: 20,\r\n    width: \"100%\",    \r\n    textAlign: \"center\"  \r\n  },\r\n  lab: {\r\n    fontSize: 15,\r\n    marginLeft: 30,\r\n  },\r\n  checkbox: {\r\n    paddingTop: 10,  \r\n    transform: \"scale(2)\",\r\n  },\r\n});\r\n\r\nexport const TestTemplate_A_2 = ({quest, questText, answers}:ITT_A_2_props) => {\r\n  const dispatch:Dispatch<any> = useDispatch();\r\n  const curUserAnswer = useSelector((state:IRootState) => state.curUserAnswer);\r\n  \r\n  const classes = useStyles();\r\n  const [ ch0, setCh0 ] = useState(false);\r\n  const [ ch1, setCh1 ] = useState(false);\r\n  const [ ch2, setCh2 ] = useState(false);\r\n  const [ ch3, setCh3 ] = useState(false);\r\n  const [ ch4, setCh4 ] = useState(false);\r\n\r\n  useEffect (() => {\r\n    if (curUserAnswer === \"\") {\r\n      setCh0(false);\r\n      setCh1(false);\r\n      setCh2(false);\r\n      setCh3(false);\r\n      setCh4(false);\r\n    }    \r\n  },[ curUserAnswer]);\r\n  useEffect(()=>{\r\n    dispatch({\r\n        type: \"SetUserAnswer\",\r\n        curUserAnswer : `${ch0?\"1\":\"\"}${ch1?\"2\":\"\"}${ch2?\"3\":\"\"}${ch3?\"4\":\"\"}${ch4?\"5\":\"\"}`\r\n    });\r\n  },[ch0, ch1, ch2, ch3, ch4]);\r\n  \r\n  return (\r\n    <div className=\"TT_A_2\">\r\n      <p className = {classes.quest}>{quest}</p>\r\n      <p className = {classes.questText}>{questText}</p>\r\n      <div className = \"TT_A_2_container\">\r\n      <FormGroup className={classes.group}>\r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox\r\n              checked={ch0}\r\n              className={classes.checkbox}\r\n              onChange={ () => setCh0(!ch0) }\r\n              name=\"gilad\"\r\n            />\r\n          }\r\n          label={<Typography className={classes.lab}>{answers[0]}</Typography>}\r\n        />        \r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch1} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh1(!ch1) }\r\n                name=\"jason\" />}\r\n          label={<Typography className={classes.lab}>{answers[1]}</Typography>}\r\n        />\r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch2} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh2(!ch2) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[2]}</Typography>}\r\n        />\r\n         <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch3} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh3(!ch3) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[3]}</Typography>}\r\n        />\r\n         <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch4} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh4(!ch4) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[4]}</Typography>}\r\n        />\r\n      </FormGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_A_1.tsx",["140"],"import {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { Dispatch, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\ninterface ITT_A_1_props {\r\n  quest: string;\r\n  answers: string[];\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  group: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    height: \"500px\",\r\n  },\r\n  quest : {\r\n      fontSize: 50,\r\n      width: \"100%\",    \r\n      textAlign: \"center\"  \r\n  },\r\n  lab: {\r\n    fontSize: 25,\r\n    marginLeft: 30,\r\n  },\r\n  checkbox: {\r\n    paddingTop: 10,  \r\n    transform: \"scale(2)\",\r\n  },\r\n});\r\n\r\nexport const TestTemplate_A_1 = ({quest, answers}:ITT_A_1_props) => {\r\n  const dispatch:Dispatch<any> = useDispatch();\r\n  const curUserAnswer = useSelector((state:IRootState) => state.curUserAnswer);\r\n  \r\n  const classes = useStyles();\r\n  const [ ch0, setCh0 ] = useState(false);\r\n  const [ ch1, setCh1 ] = useState(false);\r\n  const [ ch2, setCh2 ] = useState(false);\r\n  const [ ch3, setCh3 ] = useState(false);\r\n  const [ ch4, setCh4 ] = useState(false);\r\n  \r\n  useEffect (() => {\r\n    if (curUserAnswer === \"\") {\r\n      setCh0(false);\r\n      setCh1(false);\r\n      setCh2(false);\r\n      setCh3(false);\r\n      setCh4(false);\r\n    }    \r\n  },[ curUserAnswer])\r\n\r\n  useEffect(()=>{\r\n    dispatch({\r\n        type: \"SetUserAnswer\",\r\n        curUserAnswer : `${ch0?\"1\":\"\"}${ch1?\"2\":\"\"}${ch2?\"3\":\"\"}${ch3?\"4\":\"\"}${ch4?\"5\":\"\"}`\r\n    });\r\n  },[ch0, ch1, ch2, ch3, ch4])\r\n  \r\n  return (\r\n    <div className=\"TT_A_1\">\r\n      <p className = {classes.quest}>{quest}</p>\r\n      <div className = \"TT_A_1_container\">\r\n      <FormGroup className={classes.group}>\r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox\r\n              checked={ch0}\r\n              className={classes.checkbox}\r\n              onChange={ () => setCh0(!ch0) }\r\n              name=\"gilad\"\r\n            />\r\n          }\r\n          label={<Typography className={classes.lab}>{answers[0]}</Typography>}\r\n        />        \r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch1} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh1(!ch1) }\r\n                name=\"jason\" />}\r\n          label={<Typography className={classes.lab}>{answers[1]}</Typography>}\r\n        />\r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch2} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh2(!ch2) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[2]}</Typography>}\r\n        />\r\n         <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch3} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh3(!ch3) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[3]}</Typography>}\r\n        />\r\n         <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch4} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh4(!ch4) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[4]}</Typography>}\r\n        />\r\n      </FormGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",["141","142"],"D:\\dev\\cab\\cab2021_typescript\\src\\store\\Tests.ts",[],"D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\TestPage\\TestPageTemplates\\TestPageTemplate_A_0.tsx",["143"],"import {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\ninterface ITT_A_0_props {\r\n  quest: string;\r\n  answers: string[];\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  quest : {\r\n      fontSize: 60,\r\n      width: \"100%\",    \r\n      textAlign: \"center\"  \r\n  },\r\n  lab: {\r\n    fontSize: 40,\r\n    marginLeft: 30,\r\n  },\r\n  checkbox: {\r\n    paddingTop: 10,  \r\n    transform: \"scale(2)\",\r\n  },\r\n});\r\n\r\nexport const TestTemplate_A_0 = ({quest, answers}:ITT_A_0_props) => {\r\n  const dispatch:Dispatch<any> = useDispatch();\r\n  const curUserAnswer = useSelector((state:IRootState) => state.curUserAnswer);\r\n  const classes = useStyles();\r\n  const [ ch0, setCh0 ] = useState(false);\r\n  const [ ch1, setCh1 ] = useState(false);\r\n  const [ ch2, setCh2 ] = useState(false);\r\n  const [ ch3, setCh3 ] = useState(false);\r\n  const [ ch4, setCh4 ] = useState(false);\r\n\r\n  useEffect (() => {\r\n    if (curUserAnswer === \"\") {\r\n      setCh0(false);\r\n      setCh1(false);\r\n      setCh2(false);\r\n      setCh3(false);\r\n      setCh4(false);\r\n    }    \r\n  },[ curUserAnswer])\r\n\r\n  useEffect(()=>{\r\n    dispatch({\r\n        type: \"SetUserAnswer\",\r\n        curUserAnswer : `${ch0?\"1\":\"\"}${ch1?\"2\":\"\"}${ch2?\"3\":\"\"}${ch3?\"4\":\"\"}${ch4?\"5\":\"\"}`\r\n    });\r\n  },[ch0, ch1, ch2, ch3, ch4])\r\n  \r\n  return (\r\n    <div className=\"TT_A_0\">\r\n      <p className = {classes.quest}>{quest}</p>\r\n      <FormGroup>\r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox\r\n              checked={ch0}\r\n              className={classes.checkbox}\r\n              onChange={ () => setCh0(!ch0) }\r\n              name=\"gilad\"\r\n            />\r\n          }\r\n          label={<Typography className={classes.lab}>{answers[0]}</Typography>}\r\n        />\r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch1} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh1(!ch1) }\r\n                name=\"jason\" />}\r\n          label={<Typography className={classes.lab}>{answers[1]}</Typography>}\r\n        />\r\n        <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch2} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh2(!ch2) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[2]}</Typography>}\r\n        />\r\n         <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch3} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh3(!ch3) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[3]}</Typography>}\r\n        />\r\n         <FormControlLabel\r\n          className={classes.lab}\r\n          control={\r\n            <Checkbox \r\n                checked={ch4} \r\n                className={classes.checkbox}\r\n                onChange={ () => setCh4(!ch4) }\r\n                name=\"antoine\" />}\r\n          label={<Typography className={classes.lab}>{answers[4]}</Typography>}\r\n        />\r\n      </FormGroup>\r\n    </div>\r\n  );\r\n};\r\n","D:\\dev\\cab\\cab2021_typescript\\src\\components\\MainPage\\AdminPages\\AdminShowTestInfoTest.tsx",["144","145"],"import { Accordion, AccordionDetails, AccordionSummary, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\ninterface Quest {\r\n    id: string;       \r\n    quest: string;     \r\n    questText?: string;\r\n    answers?: string[];\r\n    right: string;\r\n}\r\n\r\ninterface Test {\r\n    arr: Quest[]\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    Accord : {\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    head: {\r\n        fontSize: \"25px\",\r\n    }\r\n})\r\n\r\nexport const AdminShowTestInfoTest = ({arr}:Test) => {\r\n    const classes = useStyles();\r\n    const [ curAcc, setCurAcc ] = useState<any[]>([]);\r\n\r\n    useEffect(()=> {\r\n        let q: any[] = [];\r\n            arr.map( (al:Quest ) => {\r\n                q.push(  \r\n                    <Accordion >                  \r\n                        <AccordionSummary className = {classes.head}>\r\n                        <Typography> {al.id||\"\"}</Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails className = {classes.Accord}>\r\n                            <p className = {classes.head}> {al.quest}</p>              \r\n                            <p> {al.questText || \"\"}</p>                \r\n                            {al.answers?al.answers!.map( (el:any, ind:number) => <p>{`${ind}.${el}`}</p>):\"\" }          \r\n                            <p> {al.right }</p>\r\n                        </AccordionDetails> \r\n                    </Accordion>                  \r\n                )\r\n            });\r\n            setCurAcc( q );\r\n    },[arr])\r\n    return (  \r\n        <>          \r\n        {curAcc}            \r\n        </>\r\n    )\r\n}\r\n",{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":74,"column":8,"nodeType":"152","endLine":74,"endColumn":21,"suggestions":"153"},{"ruleId":"154","severity":1,"message":"155","line":13,"column":3,"nodeType":"156","messageId":"157","endLine":13,"endColumn":18},{"ruleId":"154","severity":1,"message":"158","line":17,"column":23,"nodeType":"156","messageId":"157","endLine":17,"endColumn":34},{"ruleId":"154","severity":1,"message":"159","line":45,"column":10,"nodeType":"156","messageId":"157","endLine":45,"endColumn":22},{"ruleId":"160","severity":1,"message":"161","line":53,"column":38,"nodeType":"162","messageId":"163","endLine":53,"endColumn":40},{"ruleId":"160","severity":1,"message":"161","line":99,"column":37,"nodeType":"162","messageId":"163","endLine":99,"endColumn":39},{"ruleId":"160","severity":1,"message":"161","line":125,"column":37,"nodeType":"162","messageId":"163","endLine":125,"endColumn":39},{"ruleId":"160","severity":1,"message":"161","line":83,"column":41,"nodeType":"162","messageId":"163","endLine":83,"endColumn":43},{"ruleId":"160","severity":1,"message":"161","line":90,"column":72,"nodeType":"162","messageId":"163","endLine":90,"endColumn":74},{"ruleId":"160","severity":1,"message":"161","line":93,"column":47,"nodeType":"162","messageId":"163","endLine":93,"endColumn":49},{"ruleId":"160","severity":1,"message":"161","line":107,"column":47,"nodeType":"162","messageId":"163","endLine":107,"endColumn":49},{"ruleId":"154","severity":1,"message":"164","line":54,"column":13,"nodeType":"156","messageId":"157","endLine":54,"endColumn":19},{"ruleId":"160","severity":1,"message":"161","line":66,"column":33,"nodeType":"162","messageId":"163","endLine":66,"endColumn":35},{"ruleId":"160","severity":1,"message":"161","line":70,"column":38,"nodeType":"162","messageId":"163","endLine":70,"endColumn":40},{"ruleId":"165","severity":1,"message":"166","line":73,"column":50,"nodeType":"167","endLine":73,"endColumn":108},{"ruleId":"165","severity":1,"message":"168","line":75,"column":50,"nodeType":"167","endLine":75,"endColumn":108},{"ruleId":"165","severity":1,"message":"169","line":77,"column":50,"nodeType":"167","endLine":77,"endColumn":135},{"ruleId":"165","severity":1,"message":"170","line":79,"column":50,"nodeType":"167","endLine":79,"endColumn":114},{"ruleId":"165","severity":1,"message":"171","line":81,"column":50,"nodeType":"167","endLine":81,"endColumn":125},{"ruleId":"150","severity":1,"message":"172","line":95,"column":7,"nodeType":"152","endLine":95,"endColumn":21,"suggestions":"173"},{"ruleId":"160","severity":1,"message":"161","line":24,"column":45,"nodeType":"162","messageId":"163","endLine":24,"endColumn":47},{"ruleId":"150","severity":1,"message":"174","line":40,"column":7,"nodeType":"152","endLine":40,"endColumn":9,"suggestions":"175"},{"ruleId":"150","severity":1,"message":"174","line":43,"column":7,"nodeType":"152","endLine":43,"endColumn":19,"suggestions":"176"},{"ruleId":"160","severity":1,"message":"161","line":23,"column":47,"nodeType":"162","messageId":"163","endLine":23,"endColumn":49},{"ruleId":"150","severity":1,"message":"177","line":53,"column":5,"nodeType":"152","endLine":53,"endColumn":16,"suggestions":"178"},{"ruleId":"150","severity":1,"message":"177","line":48,"column":5,"nodeType":"152","endLine":48,"endColumn":16,"suggestions":"179"},{"ruleId":"150","severity":1,"message":"177","line":69,"column":5,"nodeType":"152","endLine":69,"endColumn":30,"suggestions":"180"},{"ruleId":"150","severity":1,"message":"177","line":63,"column":5,"nodeType":"152","endLine":63,"endColumn":30,"suggestions":"181"},{"ruleId":"146","replacedBy":"182"},{"ruleId":"148","replacedBy":"183"},{"ruleId":"150","severity":1,"message":"177","line":58,"column":5,"nodeType":"152","endLine":58,"endColumn":30,"suggestions":"184"},{"ruleId":"160","severity":1,"message":"161","line":32,"column":34,"nodeType":"162","messageId":"163","endLine":32,"endColumn":36},{"ruleId":"150","severity":1,"message":"185","line":48,"column":7,"nodeType":"152","endLine":48,"endColumn":12,"suggestions":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'NavMenuClickHanlder' and 'NavMenuExitHandler'. Either include them or remove the dependency array.","ArrayExpression",["189"],"@typescript-eslint/no-unused-vars","'TablePagination' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'selectedTest' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'rQuest' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component TestTemplate_A_0 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component TestTemplate_A_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component TestTemplate_A_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component TestTemplate_B_0 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component TestTemplate_B_1 must be in PascalCase or SCREAMING_SNAKE_CASE","React Hook useEffect has a missing dependency: 'rThemes'. Either include it or remove the dependency array. You can also do a functional update 'setRThemes(r => ...)' if you only need 'rThemes' in the 'setRThemes' call.",["190"],"React Hook useEffect has a missing dependency: 'getTabData'. Either include it or remove the dependency array.",["191"],["192"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["193"],["194"],["195"],["196"],["187"],["188"],["197"],"React Hook useEffect has missing dependencies: 'classes.Accord' and 'classes.head'. Either include them or remove the dependency array.",["198"],"no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"207","fix":"209"},{"desc":"210","fix":"211"},{"desc":"210","fix":"212"},{"desc":"210","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [NavMenuClickHanlder, NavMenuExitHandler, curUserData]",{"range":"216","text":"217"},"Update the dependencies array to be: [curTestName, rThemes]",{"range":"218","text":"219"},"Update the dependencies array to be: [getTabData]",{"range":"220","text":"221"},"Update the dependencies array to be: [curUserFIO, getTabData]",{"range":"222","text":"223"},"Update the dependencies array to be: [curAnswer, dispatch]",{"range":"224","text":"225"},{"range":"226","text":"225"},"Update the dependencies array to be: [ch0, ch1, ch2, ch3, ch4, dispatch]",{"range":"227","text":"228"},{"range":"229","text":"228"},{"range":"230","text":"228"},"Update the dependencies array to be: [arr, classes.Accord, classes.head]",{"range":"231","text":"232"},[2634,2647],"[NavMenuClickHanlder, NavMenuExitHandler, curUserData]",[3855,3869],"[curTestName, rThemes]",[1513,1515],"[getTabData]",[1579,1591],"[curUserFIO, getTabData]",[1230,1241],"[curAnswer, dispatch]",[1085,1096],[1659,1684],"[ch0, ch1, ch2, ch3, ch4, dispatch]",[1507,1532],[1427,1452],[1586,1591],"[arr, classes.Accord, classes.head]"]